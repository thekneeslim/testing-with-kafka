# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see org.apache.kafka.clients.producer.ProducerConfig for more details

############################# Producer Basics #############################

# list of brokers used for bootstrapping knowledge about the rest of the cluster
# format: host1:port1,host2:port2 ...
bootstrap.servers=localhost:9093

# specify the compression codec for all data generated: none, gzip, snappy, lz4
compression.type=none

# name of the partitioner class for partitioning events; default partition spreads data randomly
#partitioner.class=

# the maximum amount of time the client will wait for the response of a request
#request.timeout.ms=

# how long `KafkaProducer.send` and `KafkaProducer.partitionsFor` will block for
#max.block.ms=

# the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together
#linger.ms=

# the maximum size of a request in bytes
#max.request.size=

# the default batch size in bytes when batching multiple records sent to a partition
#batch.size=

# the total bytes of memory the producer can use to buffer records waiting to be sent to the server
#buffer.memory=


# SSL
# security.protocol=SSL
# ssl.keystore.location=/Users/denise/Desktop/Messing_With_Code/experiments/kafka/testing-with-kafka/certs/server.keystore.jks
# ssl.keystore.password=password
# ssl.key.password=password
# ssl.truststore.location=/Users/denise/Desktop/Messing_With_Code/experiments/kafka/testing-with-kafka/certs/server.truststore.jks
# ssl.truststore.password=password
#
# ssl.endpoint.identification.algorithm=

# AVRO
# key.converter=io.confluent.connect.avro.AvroConverter
# key.converter.schema.registry.url=http://0.0.0.0:8082
# key.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
# value.converter=io.confluent.connect.avro.AvroConverter
# value.converter.schema.registry.url=https://0.0.0.0:8082
# schema.registry.url=https://0.0.0.0:8082
# value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
# key.converter.schemas.enable=false
# value.converter.schemas.enable=false

# export SCHEMA_REGISTRY_OPTS="-Djavax.net.ssl.keyStore=/Users/denise/Desktop/Messing_With_Code/experiments/kafka/testing-with-kafka/certs/server.keystore.jks -Djavax.net.ssl.trustStore=/Users/denise/Desktop/Messing_With_Code/experiments/kafka/testing-with-kafka/certs/server.truststore.jks -Djavax.net.ssl.keyStorePassword=password -Djavax.net.ssl.trustStorePassword=password"
# export KAFKA_OPTS="-Djavax.net.ssl.keyStore=/Users/denise/Desktop/Messing_With_Code/experiments/kafka/testing-with-kafka/certs/server.keystore.jks -Djavax.net.ssl.trustStore=/Users/denise/Desktop/Messing_With_Code/experiments/kafka/testing-with-kafka/certs/server.truststore.jks -Djavax.net.ssl.keyStorePassword=password -Djavax.net.ssl.trustStorePassword=password"
